from datetime import timedelta

from django.urls import reverse
from django.utils import timezone
from rest_framework import status
from rest_framework.test import APITestCase

from insurance.models import Policy
from insurance.utils import PolicyStates, PolicyTypes
from users.models import User


class QuoteTestCase(APITestCase):
    def setUp(self) -> None:
        self.customer = User.objects.create(
            first_name='Divyanshu', last_name='Dimri',
            username='dimri@div',
            date_of_birth=(timezone.now() - timedelta(days=28 * 365)).date()
        )
        self.policy = Policy.objects.create(
            customer=self.customer,
            type=PolicyTypes.HEALTH.value,
            premium=100,
            cover=10000000
        )
        self.policy_list = reverse('v1:quote-list')

    def test_quote_creation(self):
        payload = {
            'customer_id': self.customer.id,
            'type': PolicyTypes.HEALTH.value
        }
        res = self.client.post(self.policy_list, data=payload)
        self.assertEqual(res.status_code, status.HTTP_201_CREATED)
        policy_qs = Policy.objects.filter(pk=res.json()['quote_id'])
        self.assertTrue(policy_qs.exists())
        policy = policy_qs.first()
        # testing premium and cover generated by PremiumCalculator
        self.assertEqual(policy.premium, 10)
        self.assertEqual(policy.cover, 500000)

        # State in payload does nothing while creation
        payload = {
            'customer_id': self.customer.id,
            'type': PolicyTypes.HEALTH.value,
            'state': PolicyStates.ACTIVE.value
        }
        res = self.client.post(self.policy_list, data=payload)
        self.assertEqual(res.status_code, status.HTTP_201_CREATED)
        self.assertEqual(res.json()['state'], PolicyStates.NEW.value)

    def test_quote_detail(self):
        url = reverse('v1:quote-detail', kwargs={'pk': self.policy.pk})
        res = self.client.get(url)
        self.assertEqual(res.json()['type'], PolicyTypes.HEALTH.value)
        self.assertEqual(res.json()['customer_id'], self.customer.id)

    def test_quote_update(self):
        payload = {
            'type': PolicyTypes.PERSONAL_ACCIDENT.value
        }
        url = reverse('v1:quote-detail', kwargs={'pk': self.policy.pk})
        res = self.client.put(url, data=payload)
        self.assertEqual(res.status_code, status.HTTP_200_OK)
        self.policy.refresh_from_db()
        self.assertFalse(self.policy.type == PolicyTypes.PERSONAL_ACCIDENT.value)
        self.assertTrue(self.policy.type == PolicyTypes.HEALTH.value)

        # new -> active == Not allowed
        payload = {
            'state': PolicyStates.ACTIVE.value
        }
        res = self.client.put(url, data=payload)
        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)

        # new -> quoted == Allowed
        payload = {
            'state': PolicyStates.QUOTED.value
        }
        res = self.client.put(url, data=payload)
        self.assertEqual(res.status_code, status.HTTP_200_OK)
        self.policy.refresh_from_db()
        self.assertEqual(self.policy.state, PolicyStates.QUOTED.value)

        # quoted -> active == Allowed
        payload = {
            'state': PolicyStates.ACTIVE.value
        }
        res = self.client.put(url, data=payload)
        self.assertEqual(res.status_code, status.HTTP_200_OK)
        self.policy.refresh_from_db()
        self.assertEqual(self.policy.state, PolicyStates.ACTIVE.value)


class PolicyTestCase(APITestCase):
    def setUp(self):
        self.customer_1 = User.objects.create(
            first_name='Divyanshu', last_name='Dimri',
            username='dimri@div',
            date_of_birth=(timezone.now() - timedelta(days=28 * 365)).date()
        )
        self.policy_1 = Policy.objects.create(
            customer=self.customer_1,
            type=PolicyTypes.PERSONAL_ACCIDENT.value,
            premium=100,
            cover=10000000,
            state=PolicyStates.ACTIVE.value
        )
        self.customer_2 = User.objects.create(
            first_name='Sudhanshu', last_name='Dimri',
            username='sud@dimri',
            date_of_birth=(timezone.now() - timedelta(days=40 * 365)).date()
        )
        self.policy_2 = Policy.objects.create(
            customer=self.customer_2,
            type=PolicyTypes.HEALTH.value,
            premium=150,
            cover=10000000,
            state=PolicyStates.ACTIVE.value
        )

    def test_policy_list(self):
        list_all_url = reverse('v1:policies-list')
        res = self.client.get(list_all_url)
        self.assertEqual(res.status_code, status.HTTP_200_OK)
        self.assertEqual(len(res.json()['results']), 2)

        # CUSTOMER 1
        res = self.client.get(list_all_url, data={'customer_id': self.customer_1.pk})
        self.assertEqual(res.status_code, status.HTTP_200_OK)
        policy = res.json()['results'][0]
        self.assertEqual(policy['customer'], self.customer_1.id)
        self.assertEqual(policy['type'], PolicyTypes.PERSONAL_ACCIDENT.value)

        # CUSTOMER 2
        res = self.client.get(list_all_url, data={'customer_id': self.customer_2.pk})
        self.assertEqual(res.status_code, status.HTTP_200_OK)
        policy = res.json()['results'][0]
        self.assertEqual(policy['customer'], self.customer_2.id)
        self.assertEqual(policy['type'], PolicyTypes.HEALTH.value)

        # Type filter test
        res = self.client.get(list_all_url, data={'type': PolicyTypes.PERSONAL_ACCIDENT.value})
        self.assertEqual(res.status_code, status.HTTP_200_OK)
        policy = res.json()['results'][0]
        self.assertEqual(policy['id'], self.policy_1.id)

        res = self.client.get(list_all_url, data={'type': PolicyTypes.HEALTH.value})
        self.assertEqual(res.status_code, status.HTTP_200_OK)
        policy = res.json()['results'][0]
        self.assertEqual(policy['id'], self.policy_2.id)
